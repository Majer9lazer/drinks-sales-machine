@{
    ViewData["Title"] = "Home Page";
}
@section Styles
{
    <link rel="stylesheet" href="~/css/album.css" />
}

<div class="container-fluid" id="mainBlock">
    <div class="row">
        <div class="col-md-12 jumbotron">
            <h1>Добро пожаловать!</h1>
            <p class="lead">Рады приветствовать вас в нашей автоматизированной системе покупки напитков в автоматах!</p>
            <p class="lead">
                Так же вы можете
                <a href="@Url.Action("Index", "Docs")" role="button">ознакомиться</a>
                как работать с нашей системой и её преимуществами.
            </p>

            <p class="h4">{{machine.name}}</p>

        </div>
    </div>
    <div class="row py-4 bg-white">
        <div class="col-md-12">
            <div class="float-left">
                <h3 class="d-flex justify-content-between align-items-center">
                    <span class="text-dark">Всего рублей в автомате : <span class="badge badge-secondary badge-info">{{totalCoinsInMachine}}</span></span>
                </h3>
            </div>
        </div>
        <div class="col-md-12">
            <div class="float-left">
                <h4 class="d-flex justify-content-between align-items-center">
                    <span class="text-dark">Ваши средства в автомате : <span class="badge badge-secondary badge-info">{{totalLocalCoinsInMachine}}</span></span>
                </h4>
            </div>
        </div>

        <div class="col-md-12">
            <div class="float-left">
                <h4 class="d-flex justify-content-between align-items-center">
                    <span class="text-dark">Куплено напитков <span class="badge badge-secondary badge-info">{{boughtDrinks.length}}</span></span>
                </h4>
            </div>
        </div>
    </div>

    <div class="row py-4 bg-light">
        <div class="col-md-9">
            <div class="row">
                <div class="col-md-4" v-for="drink in machine.drinks">
                    <div class="card mb-4 shadow-lg">
                        <img class="bd-placeholder-img card-img-top py-sm-2" :src="drink.image.path" height="225"
                             role="img" aria-label="Placeholder: Thumbnail">
                        <div class="card-body">
                            <h4 class="card-text">{{drink.name}} <span class="badge badge-primary">{{drink.count}}</span></h4>
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="btn-group">
                                    <button type="button" class="btn btn-sm btn-outline-success" v-bind:disabled="isEnabledToBuy(drink)===false" @@click="buyDrink(drink)">Купить</button>
                                </div>
                                <small class="text-muted">{{drink.price}}. руб</small>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
        <div class="col-md-3 order-md-2">
            <div class="row">
                <div class="col-md-6 mb-1 pr-1 pl-1" v-for="coin in coins">
                    <div class="card text-dark text-center" title="Нажмите чтобы закинуть монету">
                        <a href="javaScript:void(0);" @@click="pushCoinIntoMachine(coin)">
                            <img :src="coin.image.path" :alt="coin.name" class="card-img-top p-sm-2">
                        </a>
                        <h5 class="card-title">{{coin.name}}</h5>
                    </div>
                </div>
            </div>


            @*<form class="card p-2">
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Promo code">
                        <div class="input-group-append">
                            <button type="submit" class="btn btn-secondary">Redeem</button>
                        </div>
                    </div>
                </form>*@
        </div>
    </div>

</div>
@section Scripts
{
    <script>
        var mainBlockVue = new Vue({
            el: '#mainBlock',
            data: {
                machine: {},
                localCoinsInMachine: [],
                currentUserName: '@(User?.Identity?.Name)',
                boughtDrinks: [],
                coins:[]
            },
            created: async function() {
                this.machine = await this.getMostAppropriateMachine();
                this.machine.drinks = this.getUniqueDrinksWithCount(this.machine.drinks);
                this.machine.uniqueCoins = this.getUniqueCoinsWithCount(this.machine.coins);
                this.localCoinsInMachine = this.getLocalCoinsInMachine();
                this.coins = await this.getCoins();
            },
            computed: {
                totalLocalCoinsInMachine: function() {
                    return this.localCoinsInMachine.reduce((total, coin) => total + coin.value, 0);
                },
                totalCoinsInMachine: function() {
                    if (this.machine !== undefined && this.machine !== null && this.machine.coins !== undefined) {
                        return this.machine.coins.reduce((total, coin) => total + coin.coin.value, 0);
                    } else {
                        return 0;
                    }
                }
            },
            methods: {
                getMostAppropriateMachine: async function() {
                    return (await window.axios.get('/api/Machines/MostAppropriate')).data;
                },
                async pushCoinIntoMachine(coin) {

                    const machineCoin = {
                        coinId: coin.id,
                        machineId: this.machine.id,
                        coinState: 0
                    };

                    const createdCoin = (await window.axios.post('/api/MachineCoins', machineCoin)).data;

                    createdCoin.coin = coin;
                    this.localCoinsInMachine.push(coin);
                    this.machine.coins.push(createdCoin);
                    localStorage.setItem('localCoins', JSON.stringify(this.localCoinsInMachine));
                },
                buyDrink(drink) {
                    this.boughtDrinks.push(drink);

                    const machineDrink = this.machine.drinks.find(f => f.id === drink.id);
                    const machineDrinkIndex = this.machine.drinks.indexOf(machineDrink);
                    machineDrink.count -= 1;
                    this.machine.drinks.splice(machineDrinkIndex, 1, machineDrink);

                    this.withDrawMoney(machineDrink);

                },

                isEnabledToBuy: function (drink) {
                   return this.totalLocalCoinsInMachine > drink.price;
                },

                withDrawMoney(machineDrink) {
                    console.log('machineDrink = ', machineDrink);

                },
                getLocalCoinsInMachine() {
                    const localCoins = JSON.parse(localStorage.getItem('localCoins'));
                    if (localCoins !== undefined && localCoins !== null && localCoins.length > 0) {
                        if (localCoins.length > this.machine.coins.length) {
                            localStorage.setItem('localCoins', JSON.stringify([]));
                            return [];
                        }

                        return localCoins;
                    }
                    return [];
                },
                getUniqueDrinksWithCount(drinks) {
                    return drinks
                        .map(function(value, index, array) {
                            var drink = value.drink;
                            drink.count = array.reduce((total, x) => (x.drinkId === drink.id) ? total + 1 : total, 0);
                            return drink;
                        })
                        .filter((value, index, self) => self.map(s => s.id).indexOf(value.id) === index);
                },
                getUniqueCoinsWithCount(coins) {
                    return coins
                        .map(function(value, index, array) {
                            var coin = value.coin;
                            coin.count = array.reduce((total, x) => (x.coinId === coin.id) ? total + 1 : total, 0);
                            return coin;
                        })
                        .filter((value, index, self) => self.map(s => s.id).indexOf(value.id) === index)
                        .sort((a, b) => (a.value > b.value) ? 1 : ((b.value > a.value) ? -1 : 0));
                },
                async getCoins() {
                    return (await window.axios.get('/api/Coins')).data;
                }
            }
        });
    </script>
}
