@{
    ViewData["Title"] = "Index";
}
<div class="container-fluid" id="adminMainBlock">
    <h3>Drink Sales Machine Administration</h3>
    <div class="accordion" id="accordionExample">

        <!--Machines-->
        <div class="card">
            <div class="card-header" id="headingOne">
                <h2 class="mb-0">
                    <button class="btn btn-outline-primary" type="button" data-toggle="collapse" data-target="#machineListBlock" aria-expanded="true" aria-controls="collapseOne">
                        Machines
                    </button>
                    <a href="@Url.Action("Create", "Machines")" class="btn btn-primary">+</a>
                </h2>
            </div>

            <div id="machineListBlock" class="collapse" aria-labelledby="headingOne" data-parent="#accordionExample">
                <div class="card-body">
                    <table id="machineList" class="table table-hover table-sm table-active">
                        <thead class="thead-dark">
                            <tr>
                                <th>Number</th>
                                <th>Name</th>
                                <th>Optional Info</th>
                                <th>Operations</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="machine in machines">
                                <td>{{machine.id}}</td>
                                <td>
                                    {{machine.name}}
                                </td>
                                <td>

                                    <button type="button" class="btn btn-primary" data-toggle="modal" :data-target="'#coinsModal_'+machine.id">
                                        Coins <span class="badge badge-light">{{machine.coins.length}}</span>
                                    </button>

                                    <!-- Coins Modal -->
                                    <div class="modal fade" :id="'coinsModal_'+machine.id" tabindex="-1" role="dialog" aria-hidden="true">
                                        <div class="modal-dialog" role="document">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <h5 class="modal-title">Modal title</h5>
                                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                        <span aria-hidden="true">&times;</span>
                                                    </button>
                                                </div>
                                                <div class="modal-body">
                                                    <div class="card mb-3" style="max-width: 540px;" v-for="coin in getUniqueCoins(machine)">
                                                        <div class="row no-gutters">
                                                            <div class="col-md-4">
                                                                <img :src="coin.coin.image.path" class="card-img" :alt="coin.coin.name">
                                                            </div>
                                                            <div class="col-md-8">
                                                                <div class="card-body">
                                                                    <h5 class="card-title">{{coin.coin.name}}</h5>
                                                                    <p>Состояние - {{coin.coinState===0?'Разблокирована':'Заблокирована'}}</p>
                                                                    <button type="button" v-bind:disabled="coin.coinState!==0" @@click="lockMachineCoin(coin)" class="btn btn-outline-danger">lock</button>
                                                                    <button type="button" v-bind:disabled="coin.coinState!==1" @@click="unLockMachineCoin(coin)" class="btn btn-outline-success">unlock</button>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>

                                                </div>
                                                <div class="modal-footer">
                                                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <button type="button" class="btn btn-dark" data-toggle="modal" :data-target="'#drinksModal_'+machine.id">
                                        Drinks <span class="badge badge-light">{{machine.drinks.length}}</span>
                                    </button>

                                    <!-- Drinks Modal -->
                                    <div class="modal fade" :id="'drinksModal_'+machine.id" tabindex="-1" role="dialog" aria-hidden="true">
                                        <div class="modal-dialog" role="document">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <h5 class="modal-title">Modal title</h5>
                                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                        <span aria-hidden="true">&times;</span>
                                                    </button>
                                                </div>
                                                <div class="modal-body">
                                                    <div class="card mb-3" style="max-width: 540px;" v-for="machineDrink in getUniqueDrinksWithCount(machine)">
                                                        <div class="row no-gutters">
                                                            <div class="col-md-4 text-center">
                                                                <img :src="machineDrink.drink.image.path" :alt="machineDrink.drink.name"
                                                                     width="128" height="128"
                                                                     class="mt-2 mb-2">
                                                            </div>
                                                            <div class="col-md-8">
                                                                <div class="card-body">
                                                                    <h5 class="card-title">{{machineDrink.drink.name}}</h5>
                                                                    <p>Quantity - {{machineDrink.count}}</p>
                                                                    <button type="button"
                                                                            @@click="addMachineDrink(machineDrink,machine)"
                                                                            class="btn btn-success">
                                                                        +
                                                                    </button>
                                                                    <button type="button"
                                                                            v-bind:disabled="machineDrink.count<1"
                                                                            @@click="removeMachineDrink(machineDrink)"
                                                                            class="btn btn-danger">
                                                                        -
                                                                    </button>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="modal-footer">
                                                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <div class="float-right" role="group" aria-label="Coins operations buttons">
                                        <a :href="`@Url.Action("Edit", "Machines")/${machine.id}`" class="btn btn-primary">Edit</a>
                                        <button type="button" class="btn btn-danger" @@click="removeMachine(machine)">Delete</button>
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!--Coins-->
        <div class="card">
            <div class="card-header" id="headingTwo">
                <h2 class="mb-0">
                    <button class="btn btn-outline-primary" type="button" data-toggle="collapse" data-target="#coinListBlock" aria-expanded="false" aria-controls="coinListBlock">
                        Coins
                    </button>
                    <a href="@Url.Action("Create", "Coins")" class="btn btn-primary">+</a>
                </h2>
            </div>
            <div id="coinListBlock" class="collapse" aria-labelledby="headingTwo" data-parent="#accordionExample">
                <div class="card-body ">
                    <table class="table table-bordered table-hover table-sm mx-auto" style="width: 80%">
                        <thead class="thead-dark">
                            <tr>
                                <th>Name</th>
                                <th>Image</th>
                                <th>Operations</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="(coin) in coins">
                                <td class="text-center align-middle" style="width: 7rem">
                                    <p class="h5">{{coin.name}}</p>
                                </td>
                                <td class="text-center" style="width: 7rem">
                                    <img :src="coin.image.path" class="align-content-center" width="64" height="64" :alt="coin.name">
                                </td>
                                <td class="align-middle">
                                    <div class="float-right" role="group" aria-label="Coins operations buttons">
                                        <a :href="`@Url.Action("Edit", "Coins")/${coin.id}`" class="btn btn-primary">Edit</a>
                                        <button type="button" class="btn btn-danger" @@click="removeCoin(coin)">Delete</button>
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!--Drinks-->
        <div class="card">
            <div class="card-header" id="headingThree">
                <h2 class="mb-0">
                    <button class="btn btn-outline-primary" type="button" data-toggle="collapse" data-target="#drinkListBlock" aria-expanded="false" aria-controls="drinkListBlock">
                        Drinks
                    </button>
                    <a href="@Url.Action("Create", "Drinks")" class="btn btn-primary">+</a>
                </h2>
            </div>
            <div id="drinkListBlock" class="collapse" aria-labelledby="headingThree" data-parent="#accordionExample">
                <div class="card-body">
                    <table class="table table-bordered table-hover table-sm">
                        <thead class="thead-dark">
                            <tr>
                                <th>Name</th>
                                <th>Price</th>
                                <th>Image</th>
                                <th>Operations</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="drink in drinks">
                                <td class="text-center align-middle" style="width: 7rem">
                                    <p class="h5">{{drink.name}}</p>
                                </td>
                                <td class="text-center align-middle">
                                    <p class="h4">{{drink.price}}</p>
                                </td>
                                <td class="text-center" style="width: 7rem">
                                    <img :src="drink.image.path" class="align-content-center" width="64" height="64" :alt="drink.name">
                                </td>
                                <td class="align-middle">
                                    <div class="float-right" role="group" aria-label="Drinks operations buttons">
                                        <a :href="`@Url.Action("Edit","Drinks")/${drink.id}`" class="btn btn-primary">Edit</a>
                                        <button type="button" @@click="removeDrink(drink)" class="btn btn-danger">Delete</button>
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!--Images-->
        <div class="card">
            <div class="card-header" id="imagesHeading">
                <h2 class="mb-0">
                    <button class="btn btn-outline-primary" type="button" data-toggle="collapse" data-target="#imageListBlock" aria-expanded="false" aria-controls="imageListBlock">
                        Images
                    </button>
                    <a href="@Url.Action("Create", "Images")" class="btn btn-primary">+</a>
                </h2>
            </div>
            <div id="imageListBlock" class="collapse" aria-labelledby="imagesHeading" data-parent="#accordionExample">
                <div class="card-body">
                    <table class="table table-bordered table-hover table-sm">
                        <thead class="thead-dark">
                            <tr>
                                <th>#</th>
                                <th>Path</th>
                                <th>Picture</th>
                                <th>Operations</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="image in images">
                                <td class="text-center align-middle" style="width: 7rem">
                                    <p class="h5">{{image.id}}</p>
                                </td>
                                <td class="text-center align-middle">
                                    <p class="h6">{{image.path}}</p>
                                </td>
                                <td class="text-center" style="width: 7rem">
                                    <img :src="image.path" class="align-content-center" width="64" height="64" :alt="image.name">
                                </td>
                                <td class="align-middle">
                                    <div class="float-right" role="group" aria-label="image operations buttons">
                                        <a :href="`@Url.Action("Delete","Images")/${image.id}`" class="btn btn-danger">Delete</a>
                                    </div>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

    </div>
</div>

@section Scripts
{
    <script>
        var administrationBlockVue = new Vue({
            el: '#adminMainBlock',
            data: {
                machines: [],
                coins: [],
                drinks: [],
                images: []
            },

            created: async function () {
                this.machines = await this.getMachines();
                this.coins = await this.getCoins();
                this.drinks = await this.getDrinks();
                this.images = await this.getImages();
            },
            methods: {
                getMachines: async function () {
                    return (await window.axios.get('/api/Machines')).data;
                },
                getCoins: async function () {
                    return (await window.axios.get('/api/Coins')).data;
                },
                getDrinks: async function () {
                    return (await window.axios.get('/api/Drinks')).data;
                },
                getImages: async function () {
                    return (await window.axios.get('/api/Images')).data;
                },

                removeMachine: async function (machine) {
                    await window.axios.delete(`/api/Machines/${machine.id}`);
                },
                onRemoveMachine: function (machine) {
                    const machineIndex = this.machines.findIndex(f => f.id === machine.id);
                    this.machines.splice(machineIndex, 1);
                },
                onAddMachine: function(machine) {
                    this.machines.push(machine);
                },
                onEditMachineName: function(editedMachine) {
                    const machine = this.machines.find(f => f.id === editedMachine.id);
                    const machineIndex = this.machines.indexOf(machine);
                    machine.name = editedMachine.name;
                    this.machines.splice(machineIndex, 1, machine);
                },

                removeCoin: async function (coin) {
                    await window.axios.delete(`/api/Coins/${coin.id}`);
                },
                onAddCoin: function (coin) {
                    this.coins.push(coin);
                },
                onRemoveCoin: function (coin) {
                    const index = this.coins.findIndex(f => f.id === coin.id);
                    return this.coins.splice(index, 1);
                },
                onEditCoin: function (coin) {
                    const oldCoinIndex = this.coins.findIndex(f => f.id === coin.id);
                    this.coins.splice(oldCoinIndex, 1, coin);
                },

                onAddMachineCoin: function (machineCoin) {
                    const machine = this.machines.find(f => f.id === machineCoin.machineId);
                    if (machine !== undefined && machine !== null) {
                        const machineIndex = this.machines.indexOf(machine);
                        machine.coins.push(machineCoin);
                        this.machines.splice(machineIndex, 1, machine);
                    }
                },
                onDeleteMachineCoins: function (machineCoins) {
                    const machineId = machineCoins[0].machineId;
                    const machine = this.machines.find(f => f.id === machineId);

                    for (let i = 0; i < machineCoins.length; i++) {
                        const machineCoin = machine.coins.find(f => f.id === machineCoins[i].id);
                        machine.coins.splice(machine.coins.indexOf(machineCoin), 1);
                    }
                },
                getUniqueCoins: function (machine) {
                    return machine.coins
                        .filter((value, index, self) => self.map(s => s.coin.id).indexOf(value.coin.id) === index)
                        .sort((a, b) => (a.coin.value > b.coin.value)
                            ? 1
                            : ((b.coin.value > a.coin.value) ? -1 : 0));
                },
                lockMachineCoin: async function (machineCoin) {
                    console.log('machineCoin = ', machineCoin);
                    if (machineCoin.coinState === 0) {
                        await window.axios.put('/api/MachineCoins/Lock', machineCoin);
                        machineCoin.coinState = 1;

                    }
                },
                unLockMachineCoin: async function (machineCoin) {
                    if (machineCoin.coinState === 1) {
                        await window.axios.put('/api/MachineCoins/UnLock', machineCoin);
                        machineCoin.coinState = 0;
                    }
                },
                getUniqueDrinksWithCount: function (machine) {
                    return machine.drinks
                        .map(function (value, index, array) {
                            value.count =
                                array.reduce((total, x) => (x.drinkId === value.drink.id) ? total + 1 : total, 0);
                            return value;
                        })
                        .filter((value, index, self) => self.map(s => s.drink.id).indexOf(value.drink.id) ===
                            index);
                },
                addMachineDrink: async function (machineDrink, machine) {
                    const createResponse =
                        await window.axios.post(
                            `/api/MachineDrinks/Create/${machineDrink.machineId}/${machineDrink.drinkId}`);
                    console.log('createResponse = ', createResponse);
                    machine.drinks.push(createResponse.data);
                },
                removeMachineDrink: async function (machineDrink) {
                    await window.axios.delete(`/api/MachineDrinks/${machineDrink.id}`);
                },
                onRemoveMachineDrink: function (machineDrink) {
                    const machine = this.machines.find(f => f.id === machineDrink.machineId);
                    const machineDrinkIndex = machine.drinks.findIndex(f => f.id === machineDrink.id);
                    machine.drinks.splice(machineDrinkIndex, 1);
                },
                onAddImage: function (image) { this.images.push(image); },
                onRemoveImage: function (image) {
                    const imageIndex = this.images.indexOf(image);
                    this.images.splice(imageIndex, 1);
                },
                onEditImage: function (image) {
                    const oldImageIndex = this.images.findIndex(f => f.id === image.id);
                    this.images.splice(oldImageIndex, 1, image);
                },

                removeDrink: async function (drink) {
                    await window.axios.delete(`/api/Drinks/${drink.id}`);
                },
                onAddDrink: function (drink) {
                    this.drinks.push(drink);
                },
                onRemoveDrink: function (drink) {
                    const drinkIndex = this.drinks.findIndex(f => f.id === drink.id);
                    this.drinks.splice(drinkIndex, 1);
                },
                onEditDrink: function (drink) {
                    const oldDrinkIndex = this.drinks.findIndex(f => f.id === drink.id);
                    this.drinks.splice(oldDrinkIndex, 1, drink);
                },


            }
        });
    </script>

    <script>
        const adminOperationsConnection = new signalR.HubConnectionBuilder()
            .withUrl("/adminOperationsHub")
            .configureLogging(signalR.LogLevel.Trace)
            .build();

        adminOperationsConnection.start().then(function () {
            console.log(`[adminOperationsConnection] connectionId = ${adminOperationsConnection.connectionId}`);
        });
        adminOperationsConnection.on('DeleteMachineCoins', (machineCoins) => administrationBlockVue.onDeleteMachineCoins(machineCoins));
        adminOperationsConnection.on('AddMachineCoin', (machineCoin) => administrationBlockVue.onAddMachineCoin(machineCoin));
        adminOperationsConnection.on('RemoveMachineDrink', (machineDrink) => administrationBlockVue.onRemoveMachineDrink(machineDrink));
        adminOperationsConnection.on('AddMachine', (machine) => administrationBlockVue.onAddMachine(machine));
        adminOperationsConnection.on('RemoveMachine', (machine) => administrationBlockVue.onRemoveMachine(machine));
        adminOperationsConnection.on('EditMachineName', (machine) => administrationBlockVue.onEditMachineName(machine));
        adminOperationsConnection.onclose((error) => {
            console.log('error in adminOperationsConnection, err = ', error);
        });
    </script>

    <script>
        const imageOperationsConnection = new signalR.HubConnectionBuilder()
            .withUrl("/imageOperationsHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();
        imageOperationsConnection.start().then(function () {
            console.log(`[imageOperationsHub] connectionId = ${imageOperationsConnection.connectionId}`);
        });

        imageOperationsConnection.on('AddImage', (image) => administrationBlockVue.onAddImage(image));
        imageOperationsConnection.on('RemoveImage', (image) => administrationBlockVue.onRemoveImage(image));
        imageOperationsConnection.on('EditImage', (image) => administrationBlockVue.onEditImage(image));
    </script>

    <script>
        const drinkOperationsConnection = new signalR.HubConnectionBuilder()
            .withUrl("/drinkOperationsHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();
        drinkOperationsConnection.start().then(function () {
            console.log(`[drinkOperationsHub] connectionId = ${drinkOperationsConnection.connectionId}`);
        });

        drinkOperationsConnection.on('AddDrink', (drink) => administrationBlockVue.onAddDrink(drink));
        drinkOperationsConnection.on('RemoveDrink', (drink) => administrationBlockVue.onRemoveDrink(drink));
        drinkOperationsConnection.on('EditDrink', (drink) => administrationBlockVue.onEditDrink(drink));
    </script>

    <script>
        const coinOperationsConnection = new signalR.HubConnectionBuilder()
            .withUrl("/coinOperationsHub")
            .configureLogging(signalR.LogLevel.Information)
            .build();
        coinOperationsConnection.start().then(function () {
            console.log(`[coinOperationsHub] connectionId = ${coinOperationsConnection.connectionId}`);
        });

        coinOperationsConnection.on('AddCoin', (coin) => administrationBlockVue.onAddCoin(coin));
        coinOperationsConnection.on('RemoveCoin', (coin) => administrationBlockVue.onRemoveCoin(coin));
        coinOperationsConnection.on('EditCoin', (coin) => administrationBlockVue.onEditCoin(coin));
    </script>
}